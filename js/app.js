/**
 * APLICACI√ìN PRINCIPAL - Sistema de Rifas Pampero
 * Punto de entrada y funciones principales
 */

// Gesti√≥n principal de la aplicaci√≥n
window.RaffleApp = {
    /**
     * Inicializar Supabase de forma segura
     */
    initSupabase: function() {
        console.log('üîç [DEBUG] Iniciando initSupabase de forma segura...');
        
        // Verificar que AppConfig est√© disponible
        if (!window.AppConfig) {
            console.error('‚ùå [DEBUG] AppConfig no est√° disponible');
            this.updateDbStatus('‚ùå Error de configuraci√≥n', '#f8d7da');
            return false;
        }
        
        // Inicializar configuraci√≥n segura
        const configInitialized = AppConfig.init();
        
        if (!configInitialized) {
            console.warn('‚ö†Ô∏è [DEBUG] Configuraci√≥n no inicializada');
            this.updateDbStatus('üîë Configuraci√≥n requerida', '#fff3cd');
            return false;
        }
        
        // Verificar modo demo
        if (localStorage.getItem('demo_mode') === 'true') {
            console.log('üéÆ [DEBUG] Modo demo activado');
            this.updateDbStatus('üéÆ Modo Demo (Solo localStorage)', '#e7f3ff');
            return false;
        }
        
        // Obtener credenciales de forma segura
        const supabaseUrl = AppConfig.supabase.url;
        const supabaseKey = AppConfig.supabase.anonKey;
        
        console.log('üîç [DEBUG] URL configurada:', !!supabaseUrl);
        console.log('üîç [DEBUG] Key configurada:', !!supabaseKey);
        console.log('üîç [DEBUG] SDK disponible:', typeof supabase !== 'undefined');
        
        if (!supabaseUrl || !supabaseKey) {
            console.error('üî¥ [DEBUG] Credenciales incompletas');
            this.updateDbStatus('‚ùå Credenciales incompletas', '#f8d7da');
            return false;
        }
        
        try {
            const supabaseClient = supabase.createClient(supabaseUrl, supabaseKey);
            window.supabaseClient = supabaseClient;
            console.log('üîç [DEBUG] Cliente creado exitosamente');
            
            // Inicializar SupabaseManager
            if (window.SupabaseManager) {
                console.log('üîç [DEBUG] SupabaseManager disponible, inicializando...');
                SupabaseManager.init(supabaseClient);
                console.log('üîç [DEBUG] SupabaseManager.isConnected:', SupabaseManager.isConnected);
                
                if (SupabaseManager.isConnected) {
                    this.updateDbStatus('üöÄ Supabase conectado de forma segura', '#d4edda');
                    console.log('‚úÖ Supabase inicializado correctamente');
                    
                    // Test de conexi√≥n r√°pido
                    this.testSupabaseConnection();
                    return true;
                } else {
                    console.warn('‚ö†Ô∏è SupabaseManager no se conect√≥ correctamente');
                    this.updateDbStatus('‚ö†Ô∏è Error de conexi√≥n', '#f8d7da');
                    return false;
                }
            } else {
                console.warn('‚ö†Ô∏è SupabaseManager no est√° disponible');
                this.updateDbStatus('‚ö†Ô∏è Error de configuraci√≥n', '#f8d7da');
                return false;
            }
        } catch (error) {
            console.error('üî¥ [DEBUG] Error creando cliente:', error);
            console.warn('Error en configuraci√≥n de Supabase:', error.message);
            this.updateDbStatus('üì± Modo local (localStorage)', '#fff3cd');
            return false;
        }
    },

    /**
     * Test r√°pido de conexi√≥n
     */
    testSupabaseConnection: async function() {
        console.log('üîç [DEBUG] Ejecutando test de conexi√≥n...');
        
        if (!window.supabaseClient) {
            console.error('üî¥ [DEBUG] No hay cliente disponible para test');
            return;
        }
        
        try {
            const { data, error } = await window.supabaseClient
                .from('raffles')
                .select('*')
                .limit(1);
                
            if (error) {
                console.error('üî¥ [DEBUG] Error en test de conexi√≥n:', error);
                
                if (error.code === 'PGRST116') {
                    console.warn('üü° [DEBUG] Tabla "raffles" no existe - necesitas ejecutar el SQL');
                    this.updateDbStatus('‚ö†Ô∏è Faltan tablas en Supabase', '#fff3cd');
                } else {
                    console.error('üî¥ [DEBUG] Error de configuraci√≥n:', error.message);
                    this.updateDbStatus('‚ùå Error de configuraci√≥n', '#f8d7da');
                }
            } else {
                console.log('‚úÖ [DEBUG] Test de conexi√≥n exitoso!', data);
                this.updateDbStatus('üöÄ Supabase conectado y operativo', '#d4edda');
            }
        } catch (error) {
            console.error('üî¥ [DEBUG] Error de red en test:', error);
            this.updateDbStatus('üì° Error de conexi√≥n', '#f8d7da');
        }
    },

    /**
     * Actualizar indicador de estado de la base de datos
     */
    updateDbStatus: function(message, color) {
        const status = document.getElementById('dbStatus');
        if (status) {
            status.textContent = message;
            status.style.background = color;
        }
    },

    /**
     * Configurar la rifa inicial
     */
    setupRaffle: function() {
        const name = document.getElementById('raffleName').value;
        const prize = document.getElementById('prizeDescription').value;
        const totalNumbers = parseInt(document.getElementById('totalNumbers').value);
        const price = parseFloat(document.getElementById('pricePerNumber').value);
        const organization = document.getElementById('organizationName').value;
        const whatsappNumber = document.getElementById('whatsappNumber').value;
        const clubInstagram = document.getElementById('clubInstagram').value;
        const reservationTime = parseInt(document.getElementById('reservationTime').value);

        if (!name || !prize || !totalNumbers || !price || !whatsappNumber || !reservationTime) {
            Utils.showNotification('Por favor completa todos los campos obligatorios', 'error');
            return;
        }

        // Validar formato de WhatsApp
        if (!Utils.validateWhatsApp(whatsappNumber)) {
            Utils.showNotification('Por favor ingresa un n√∫mero de WhatsApp v√°lido', 'error');
            return;
        }

        AppState.raffleConfig = {
            name,
            prize,
            totalNumbers,
            price,
            organization,
            whatsappNumber,
            clubInstagram: clubInstagram || null,
            reservationTime,
            createdAt: new Date()
        };

        // Actualizar header
        document.getElementById('raffleTitle').textContent = name;
        document.getElementById('raffleSubtitle').textContent = `${organization} - $${price} por n√∫mero`;

        // Guardar configuraci√≥n usando SupabaseManager si est√° disponible
        console.log('üîç [DEBUG] Guardando configuraci√≥n...');
        console.log('üîç [DEBUG] SupabaseManager disponible:', !!window.SupabaseManager);
        console.log('üîç [DEBUG] SupabaseManager.isConnected:', window.SupabaseManager?.isConnected);
        
        if (window.SupabaseManager && SupabaseManager.isConnected) {
            console.log('‚úÖ [DEBUG] Guardando en Supabase...');
            SupabaseManager.saveRaffleConfig(AppState.raffleConfig)
                .then(() => {
                    console.log('‚úÖ Configuraci√≥n guardada en Supabase');
                    Utils.showNotification('Configuraci√≥n guardada en Supabase', 'success');
                })
                .catch((error) => {
                    console.error('‚ùå Error guardando en Supabase:', error);
                    Utils.showNotification('Error guardando en Supabase, guardado localmente', 'warning');
                    // Fallback a localStorage
                    autoSave();
                });
        } else {
            console.log('üü° [DEBUG] Guardando en localStorage (fallback)');
            if (!window.SupabaseManager) {
                console.warn('‚ö†Ô∏è [DEBUG] SupabaseManager no disponible');
            } else {
                console.warn('‚ö†Ô∏è [DEBUG] SupabaseManager no conectado');
            }
            // Usar localStorage como fallback
            autoSave();
            Utils.showNotification('Configuraci√≥n guardada localmente', 'info');
        }

        // Inicializar interfaces
        NumbersManager.createInterface();
        AdminManager.createInterface();
        NumbersManager.startReservationChecker();

        Utils.showNotification('¬°Rifa configurada exitosamente!', 'success');
        showTab('numbers');
    },

    /**
     * Inicializar la aplicaci√≥n al cargar
     */
    init: function() {
        // Primero inicializar Supabase
        this.initSupabase();
        
        // Luego cargar datos (que ahora usar√° Supabase si est√° disponible)
        setTimeout(() => {
            loadFromStorage();
        }, 500); // Peque√±o delay para permitir que Supabase se inicialice
        
        console.log('‚úÖ RaffleApp inicializado correctamente');
    }
};

// Inicializar la aplicaci√≥n cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    RaffleApp.init();
});

console.log('‚úÖ App.js cargado correctamente');