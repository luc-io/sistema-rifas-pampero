#!/bin/bash

# ====================================================================
# VERIFICACI√ìN FINAL - Deploy Fix Validation
# ====================================================================

echo "üîç VERIFICACI√ìN FINAL DEL FIX DE DEPLOY"
echo "======================================="

# Verificar estructura de archivos
echo ""
echo "üì¶ 1. Verificando estructura de m√≥dulos refactorizados..."

modules=(
    "js/numbers-main.js"
    "js/numbers-interface.js"
    "js/numbers-info.js"
    "js/numbers-purchase.js"
    "js/numbers-assignment.js"
)

all_modules_exist=true
for module in "${modules[@]}"; do
    if [ -f "$module" ]; then
        echo "  ‚úÖ $module"
    else
        echo "  ‚ùå $module FALTANTE"
        all_modules_exist=false
    fi
done

# Verificar que no existe el archivo original
echo ""
echo "üóëÔ∏è 2. Verificando archivo original removido..."
if [ -f "js/numbers.js" ]; then
    echo "  ‚ùå js/numbers.js a√∫n existe (deber√≠a estar removido)"
else
    echo "  ‚úÖ js/numbers.js correctamente removido"
fi

# Verificar backup movido
echo ""
echo "üíæ 3. Verificando backup..."
if [ -f "backups/refactoring/numbers-original.js" ]; then
    echo "  ‚úÖ Backup movido a backups/refactoring/numbers-original.js"
else
    echo "  ‚ö†Ô∏è Backup no encontrado"
fi

# Verificar deploy.yml actualizado
echo ""
echo "üöÄ 4. Verificando configuraci√≥n de deploy..."
if grep -q "numbers-main.js" .github/workflows/deploy.yml; then
    echo "  ‚úÖ deploy.yml contiene numbers-main.js"
else
    echo "  ‚ùå deploy.yml no actualizado"
fi

if grep -q "numbers-assignment.js" .github/workflows/deploy.yml; then
    echo "  ‚úÖ deploy.yml contiene numbers-assignment.js"
else
    echo "  ‚ùå deploy.yml no contiene todos los m√≥dulos"
fi

# Verificar exclusi√≥n de backups
if grep -q "backup.js" .github/workflows/deploy.yml; then
    echo "  ‚úÖ deploy.yml excluye archivos de backup"
else
    echo "  ‚ö†Ô∏è deploy.yml no excluye archivos de backup"
fi

# Simular validaci√≥n de sintaxis (como en el deploy)
echo ""
echo "üîß 5. Simulando validaci√≥n de sintaxis del deploy..."

syntax_errors=0
for js_file in js/*.js; do
    if [ -f "$js_file" ] && [[ "$js_file" != *"-backup.js" ]] && [[ "$js_file" != *"-old-backup.js" ]]; then
        if node -c "$js_file" 2>/dev/null; then
            echo "  ‚úÖ $js_file - sintaxis OK"
        else
            echo "  ‚ùå $js_file - ERROR DE SINTAXIS"
            syntax_errors=$((syntax_errors + 1))
        fi
    fi
done

# Verificar carga en HTML
echo ""
echo "üìÑ 6. Verificando carga en index.html..."
html_checks=0

for module in "${modules[@]}"; do
    module_name=$(basename "$module")
    if grep -q "$module_name" index.html; then
        echo "  ‚úÖ $module_name cargado en HTML"
        html_checks=$((html_checks + 1))
    else
        echo "  ‚ùå $module_name NO cargado en HTML"
    fi
done

# Resumen final
echo ""
echo "üìä RESUMEN FINAL"
echo "==============="

if [ "$all_modules_exist" = true ] && [ $syntax_errors -eq 0 ] && [ $html_checks -eq 5 ]; then
    echo "üéâ ¬°DEPLOY FIX EXITOSO!"
    echo ""
    echo "‚úÖ Todos los m√≥dulos refactorizados existen"
    echo "‚úÖ Sintaxis JavaScript correcta"
    echo "‚úÖ Configuraci√≥n de deploy actualizada"
    echo "‚úÖ Archivos de backup organizados"
    echo "‚úÖ HTML carga todos los m√≥dulos"
    echo ""
    echo "üöÄ El deploy deber√≠a pasar exitosamente ahora"
    echo ""
    echo "Comandos sugeridos:"
    echo "  git add ."
    echo "  git commit -m 'üîß Fix: Resolve deploy validation for refactored modules'"
    echo "  git push origin main"
    
    exit 0
else
    echo "‚ùå A√öN HAY PROBLEMAS:"
    [ "$all_modules_exist" = false ] && echo "  - Faltan algunos m√≥dulos"
    [ $syntax_errors -gt 0 ] && echo "  - Errores de sintaxis en $syntax_errors archivos"
    [ $html_checks -ne 5 ] && echo "  - No todos los m√≥dulos est√°n cargados en HTML"
    
    exit 1
fi
